/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HeaderAdjusterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  increaseLevel: 1,
  decreaseLevel: 1
};
var HeaderObject = class {
  constructor(level, lineNumber, parent) {
    this.level = level;
    this.lineNumber = lineNumber;
    this.parent = parent;
    this.children = [];
  }
};
var HeaderAdjusterPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("heading", "Adjust Headers", (event) => {
      const menu = new import_obsidian.Menu();
      menu.addItem(
        (item) => item.setTitle("Increase Header Level").onClick(() => this.openLevelInputModal("increase"))
      );
      menu.addItem(
        (item) => item.setTitle("Decrease Header Level").onClick(() => this.openLevelInputModal("decrease"))
      );
      menu.showAtMouseEvent(event);
    });
    this.addCommand({
      id: "increase-header-level",
      name: "Increase Header Level",
      callback: () => this.openLevelInputModal("increase")
    });
    this.addCommand({
      id: "decrease-header-level",
      name: "Decrease Header Level",
      callback: () => this.openLevelInputModal("decrease")
    });
    this.addCommand({
      id: "increase-header-level-default",
      name: "Increase Header Level (Default)",
      callback: () => this.adjustHeaders("increase", this.settings.increaseLevel, null, null)
    });
    this.addCommand({
      id: "decrease-header-level-default",
      name: "Decrease Header Level (Default)",
      callback: () => this.adjustHeaders("decrease", this.settings.decreaseLevel, null, null)
    });
    this.addSettingTab(new HeaderAdjusterSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  openLevelInputModal(operation) {
    const modal = new LevelInputModal(this.app, (levels, startLine, endLine) => {
      if (isNaN(levels)) {
        levels = operation === "increase" ? this.settings.increaseLevel : this.settings.decreaseLevel;
      }
      this.adjustHeaders(operation, levels, startLine, endLine);
    }, operation, this.settings);
    modal.open();
  }
  adjustHeaders(operation, levels, startLine, endLine) {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (!activeLeaf) {
      new import_obsidian.Notice("No active editor found");
      return;
    }
    const view = activeLeaf.view;
    if (view.getViewType() !== "markdown") {
      new import_obsidian.Notice("Active view is not a markdown file");
      return;
    }
    const editor = view.editor;
    if (!editor) {
      new import_obsidian.Notice("No editor found");
      return;
    }
    const headerObjects = this.createHeaderObjects(editor, startLine, endLine);
    if (operation === "increase") {
      headerObjects.reverse();
    }
    this.updateHeaderLevels(headerObjects, operation, levels);
    this.applyHeaderChanges(editor, headerObjects);
  }
  createHeaderObjects(editor, startLine, endLine) {
    const headerPattern = /^(#{1,6})\s(.*)$/;
    const headerObjects = [];
    let lastHeader = null;
    for (let i = 0; i < editor.lineCount(); i++) {
      if (startLine !== null && i + 1 < startLine || endLine !== null && i + 1 > endLine) {
        continue;
      }
      const line = editor.getLine(i);
      const match = line.match(headerPattern);
      if (match) {
        const currentLevel = match[1].length;
        const newHeader = new HeaderObject(currentLevel, i + 1, null);
        if (lastHeader && currentLevel > lastHeader.level) {
          newHeader.parent = lastHeader;
          lastHeader.children.push(newHeader);
        } else if (lastHeader) {
          let parent = lastHeader.parent;
          while (parent && parent.level >= currentLevel) {
            parent = parent.parent;
          }
          newHeader.parent = parent;
          if (parent) {
            parent.children.push(newHeader);
          }
        }
        headerObjects.push(newHeader);
        lastHeader = newHeader;
      }
    }
    return headerObjects;
  }
  updateHeaderLevels(headerObjects, operation, levels) {
    headerObjects.forEach((header) => {
      if (operation === "decrease") {
        let newLevel = header.level - levels;
        if (header.parent && newLevel <= header.parent.level) {
          newLevel = header.parent.level + 1;
        }
        header.level = Math.max(newLevel, 1);
      } else if (operation === "increase") {
        let newLevel = header.level + levels;
        header.children.forEach((child) => {
          if (newLevel >= child.level) {
            newLevel = child.level - 1;
          }
        });
        header.level = Math.min(newLevel, 6);
      }
    });
  }
  applyHeaderChanges(editor, headerObjects) {
    headerObjects.forEach((header) => {
      const line = editor.getLine(header.lineNumber - 1);
      const newHeader = "#".repeat(header.level) + " " + line.replace(/^(#{1,6})\s/, "");
      editor.replaceRange(newHeader, { line: header.lineNumber - 1, ch: 0 }, { line: header.lineNumber - 1, ch: line.length });
    });
  }
};
var LevelInputModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit, operation, settings) {
    super(app);
    this.onSubmit = onSubmit;
    this.operation = operation;
    this.settings = settings;
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.setText(`Enter the number of levels to ${this.operation} (or leave blank for default):`);
    const inputLevels = contentEl.createEl("input", { type: "number", placeholder: `${this.operation === "increase" ? this.settings.increaseLevel : this.settings.decreaseLevel}` });
    inputLevels.focus();
    contentEl.createEl("br");
    contentEl.createEl("label", { text: "Start Line (optional):" });
    const inputStartLine = contentEl.createEl("input", { type: "number", placeholder: "Start Line" });
    contentEl.createEl("br");
    contentEl.createEl("label", { text: "End Line (optional):" });
    const inputEndLine = contentEl.createEl("input", { type: "number", placeholder: "End Line" });
    contentEl.createEl("button", { text: "Submit" }).addEventListener("click", () => {
      const levels = parseInt(inputLevels.value);
      const startLine = inputStartLine.value ? parseInt(inputStartLine.value) : null;
      const endLine = inputEndLine.value ? parseInt(inputEndLine.value) : null;
      this.onSubmit(levels, startLine, endLine);
      this.close();
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var HeaderAdjusterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Header Adjuster Settings" });
    new import_obsidian.Setting(containerEl).setName("Default Increase Level").setDesc("The default level to increase headers by.").addSlider((slider) => slider.setLimits(1, 6, 1).setValue(this.plugin.settings.increaseLevel).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.increaseLevel = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Decrease Level").setDesc("The default level to decrease headers by.").addSlider((slider) => slider.setLimits(1, 6, 1).setValue(this.plugin.settings.decreaseLevel).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.decreaseLevel = value;
      await this.plugin.saveSettings();
    }));
  }
};
